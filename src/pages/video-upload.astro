<html lang='en'>
  <head>
    <meta charset='utf-8' />
    <title>Video</title>
    <script>
      const { fetchFile, toBlobURL } = FFmpegUtil;
      const { FFmpeg } = FFmpegWASM;
      let ffmpeg = null;

      const transcode = async ({ target: { files } }) => {
        const message = document.getElementById('message');
        const bar = document.getElementById('bar');

        if (ffmpeg === null) {
          ffmpeg = new FFmpeg();
          ffmpeg.on('log', ({ message }) => {
            console.log(message);
          });
          ffmpeg.on('progress', ({ progress, time }) => {
            message.innerHTML = `time: ${time / 1000000} s`;
            bar.value = `${progress * 100}`;
          });
          await ffmpeg.load({
            coreURL: await toBlobURL('/core/umd/ffmpeg-core.js', 'text/javascript'),
            wasmURL: await toBlobURL('/core/umd/ffmpeg-core.wasm', 'application/wasm'),
          });
        }
        const { name } = files[0];
        await ffmpeg.writeFile(name, await fetchFile(files[0]));

        message.innerHTML = 'Start transcoding';
        console.time('exec');
        await ffmpeg.exec(['-i', name, 'output.mp4']);
        console.timeEnd('exec');
        message.innerHTML = 'Complete transcoding';

        const data = await ffmpeg.readFile('output.mp4');

        const video = document.getElementById('video');
        video.src = URL.createObjectURL(new Blob([data.buffer], { type: 'video/mp4' }));
      };
      const input = document.getElementById('input');

      input.addEventListener('change', transcode);
    </script>
  </head>
  <body>
    <main style={{ padding: '64px' }}>
      <video id='video' controls></video><br />
      <input type='file' id='input' /><br />
      <progress id='bar' max='100'></progress>
      <p id='message'></p>
    </main>
    <script is:inline src='/ffmpeg/umd/ffmpeg.js'></script>
    <script is:inline src='/util/umd/index.js'></script>
  </body>
</html>
